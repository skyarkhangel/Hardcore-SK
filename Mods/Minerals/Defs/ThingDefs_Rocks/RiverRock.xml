<?xml version="1.0" encoding="UTF-8"?>
<Defs>
  
  <ThingDef Name="RiverRock" ParentName="DynamicMineralBase" Class="Minerals.ThingDef_RiverRock">
    <thingClass>Minerals.RiverRock</thingClass>
    <defName>RiverRock</defName>
    <label>Rounded river rocks</label>
    <description>A pile a rounded river rocks. These have been worn round during their long slow tumble from distant lands.</description>
    <graphicData>
      <texPath>Things/Rock/RiverRock</texPath>
      <graphicClass>Graphic_Random</graphicClass>
      <drawSize>(1.5,1.5)</drawSize>
      <color>(50,50,50)</color>
      <damageData>
        <enabled>false</enabled>
      </damageData>
    </graphicData>
    <uiIconPath>Things/Rock/RiverRock/RiverRockA</uiIconPath>
    <drawerType>MapMeshOnly</drawerType>
    <altitudeLayer>SmallWire</altitudeLayer>
    <fillPercent>0.1</fillPercent>
    <coversFloor>false</coversFloor>
    <hideAtSnowDepth>0.7</hideAtSnowDepth>
    <statBases>
      <MaxHitPoints>400</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>3</Beauty>
    </statBases>
    <neverMultiSelect>true</neverMultiSelect>
    <pathCost>80</pathCost>
    <filthLeaving>Filth_RubbleRock</filthLeaving>
    <mineable>true</mineable>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>2</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>1</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0</minClusterProbability>
    <maxClusterProbability>0.02</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>7</minClusterSize>
    <maxClusterSize>30</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>0.4</initialSizeMin>
    <initialSizeMax>0.9</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.3</initialSizeVariation>
    <!-- The terrains this can appear on. The default is rocky terrains-->
		<allowedTerrains>
			<li>Granite_Rough</li>
			<li>Limestone_Rough</li>
			<li>Marble_Rough</li>
			<li>Slate_Rough</li>
      <li>ZF_BasaltBase_Rough</li>
			<li>RockySoil</li>
			<li>Gravel</li>
			<li>Sand</li>
			<li>Soil</li>
			<li>MarshyTerrain</li>
			<li>Marsh</li>
			<li>PoorSoil</li>
			<li>MarginalSoil</li>
			<li>Mud</li>
      <li>SavannaSoil</li>
      <li>MarginalSoil</li>
			<li>SaltField</li>
			<li>SandBeachWetSalt</li>
		</allowedTerrains>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
      <li>WaterMovingShallow</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>4</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
    <!-- Roof requirements -->
    <mustBeUnderRoof>false</mustBeUnderRoof>
    <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
    <mustBeUnroofed>false</mustBeUnroofed>
    <!-- The maximum number of images that will be printed per square -->
    <maxMeshCount>15</maxMeshCount>
    <!-- The size range -->
    <visualSizeRange>
      <min>0.2</min>
      <max>0.6</max>
    </visualSizeRange>
    <visualClustering>0.3</visualClustering>
    <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
    <visualSpread>2.2</visualSpread>
    <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
    <visualSizeVariation>0.4</visualSizeVariation>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
      <li>
        <ResourceDefName>RoughGem</ResourceDefName>
        <DropProbability>0.05</DropProbability>
      </li>
      <li>
        <ResourceDefName>CrushedStone</ResourceDefName>
        <DropProbability>2</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>ObsidianShard</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>FlintShard</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Gold</ResourceDefName>
        <DropProbability>0.05</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Silver</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>50</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Jade</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Amber</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>RoughUltrahardGem</ResourceDefName>
        <DropProbability>0.01</DropProbability>
      </li>
      <li>
        <ResourceDefName>SmallFossil</ResourceDefName>
        <DropProbability>0.03</DropProbability>
        <CountPerDrop>1</CountPerDrop>
      </li>
    </randomlyDropResources>
    <!-- If defined, randomly pick colors from this set -->
    <randomColorsOne>
      <li>(105,95,97)</li>
      <li>(107,90,97)</li>
      <li>(115,95,110)</li>
      <li>(158,153,135)</li>
      <li>(158,155,130)</li>
      <li>(152,153,135)</li>
      <li>(158,180,155)</li>
      <li>(132,135,132)</li>
      <li>(132,135,132)</li>
      <li>(132,115,122)</li>
      <li>(130,110,122)</li>
      <li>(70,70,70)</li>
      <li>(126,104,94)</li>
      <li>(50,50,50)</li>
      <li>(200,200,200)</li>
    </randomColorsOne>
    <!-- If true, then the probability of each color is randomly chosen for each map, so each map has distinctive colors.   -->
    <seedRandomColorByMap>true</seedRandomColorByMap>
    <!-- If smaller than 1, it looks smaller in water -->
    <submergedSize>0</submergedSize>
    <submergedRadius>1</submergedRadius>
    <!-- Reproduction and death settings -->
    <minReproductionSize>0.5</minReproductionSize>
    <reproduceProp>0.001</reproduceProp>
    <deathProb>1</deathProb>
    <!-- The minimum number of crystals in clusters that are spawned during gameplay, not map creation -->
    <minSpawnClusterSize>5</minSpawnClusterSize>
    <!-- The maximum number of crystals in clusters that are spawned during gameplay, not map creation -->
    <maxSpawnClusterSize>20</maxSpawnClusterSize>
    <!-- The number of days it takes to grow at max growth speed -->
    <growDays>30</growDays>
    <!-- Chance of spawning de novo each check -->
    <spawnProb>0.005</spawnProb>
    <!-- Can spawn on items, pawns, and plants-->
    <canSpawnOnThings>false</canSpawnOnThings>
    <!-- If true, the graphics are regenerated more often -->
    <fastGraphicRefresh>true</fastGraphicRefresh>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>small_rock</li>
    </tags>
  </ThingDef>
  

  <ThingDef Name="BeachRock" ParentName="DynamicMineralBase" Class="Minerals.ThingDef_RiverRock">
    <thingClass>Minerals.RiverRock</thingClass>
    <defName>BeachRock</defName>
    <label>Rounded beach rocks</label>
    <description>A pile a rounded river rocks. The ocean has worn them round by grinding them together in the surf.</description>
    <graphicData>
      <texPath>Things/Rock/RiverRock</texPath>
      <graphicClass>Graphic_Random</graphicClass>
      <drawSize>(1.5,1.5)</drawSize>
      <color>(50,50,50)</color>
      <damageData>
        <enabled>false</enabled>
      </damageData>
    </graphicData>
    <uiIconPath>Things/Rock/RiverRock/RiverRockA</uiIconPath>
    <drawerType>MapMeshOnly</drawerType>
    <altitudeLayer>SmallWire</altitudeLayer>
    <fillPercent>0.1</fillPercent>
    <coversFloor>false</coversFloor>
    <statBases>
      <MaxHitPoints>400</MaxHitPoints>
      <Flammability>0</Flammability>
      <Beauty>3</Beauty>
    </statBases>
    <neverMultiSelect>true</neverMultiSelect>
    <pathCost>80</pathCost>
    <hideAtSnowDepth>0.7</hideAtSnowDepth>
    <filthLeaving>Filth_RubbleRock</filthLeaving>
    <mineable>true</mineable>
    <!--How far away it can spawn from an existing location-->
    <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
    <spawnRadius>1</spawnRadius>
    <!-- The probability that this mineral type will be spawned at all on a given map -->
    <perMapProbability>1</perMapProbability>
    <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
    <minClusterProbability>0</minClusterProbability>
    <maxClusterProbability>0.015</maxClusterProbability>
    <!-- How  many squares each cluster will be -->
    <minClusterSize>5</minClusterSize>
    <maxClusterSize>20</maxClusterSize>
    <!-- The range of starting sizes of individuals in clusters -->
    <initialSizeMin>0.4</initialSizeMin>
    <initialSizeMax>0.9</initialSizeMax>
    <!-- How much initial sizes of individuals randomly vary -->
    <initialSizeVariation>.3</initialSizeVariation>
    <!-- The terrains this can appear on. The default is rocky terrains-->
		<allowedTerrains>
			<li>AB_FineSand</li>
			<li>Granite_Rough</li>
			<li>Limestone_Rough</li>
			<li>Marble_Rough</li>
			<li>Slate_Rough</li>
      <li>ZF_BasaltBase_Rough</li>
			<li>RockySoil</li>
			<li>Gravel</li>
			<li>Sand</li>
			<li>SandBeachWetSalt</li>
		</allowedTerrains>
    <!-- The terrains this must be near to, but not necessarily on -->
    <neededNearbyTerrains>
			<li>WaterOceanShallow</li>
    </neededNearbyTerrains>
    <!-- how far away it can be from needed nearby terrains-->
    <neededNearbyTerrainRadius>5</neededNearbyTerrainRadius>
    <!-- If true, growth rate and initial size depends on distance from needed terrains -->
    <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
    <!-- Roof requirements -->
    <mustBeUnderRoof>false</mustBeUnderRoof>
    <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
    <mustBeUnroofed>false</mustBeUnroofed>
    <!-- The maximum number of images that will be printed per square -->
    <maxMeshCount>20</maxMeshCount>
    <!-- The size range -->
    <visualSizeRange>
      <min>0.15</min>
      <max>0.3</max>
    </visualSizeRange>
    <visualClustering>0.3</visualClustering>
    <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
    <visualSpread>2.2</visualSpread>
    <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
    <visualSizeVariation>0.4</visualSizeVariation>
    <!-- Other resources it might drop -->
    <randomlyDropResources>
      <li>
        <ResourceDefName>RoughGem</ResourceDefName>
        <DropProbability>0.05</DropProbability>
      </li>
      <li>
        <ResourceDefName>CrushedStone</ResourceDefName>
        <DropProbability>2</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>ObsidianShard</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>5</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>FlintShard</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>5</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Gold</ResourceDefName>
        <DropProbability>0.05</DropProbability>
        <CountPerDrop>5</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Silver</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>20</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Jade</ResourceDefName>
        <DropProbability>0.05</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Amber</ResourceDefName>
        <DropProbability>0.1</DropProbability>
        <CountPerDrop>10</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>Pearl</ResourceDefName>
        <DropProbability>0.05</DropProbability>
        <CountPerDrop>1</CountPerDrop>
      </li>
      <li>
        <ResourceDefName>RoughUltrahardGem</ResourceDefName>
        <DropProbability>0.01</DropProbability>
      </li>
      <li>
        <ResourceDefName>SmallFossil</ResourceDefName>
        <DropProbability>0.03</DropProbability>
        <CountPerDrop>1</CountPerDrop>
      </li>
    </randomlyDropResources>
    <!-- If defined, randomly pick colors from this set -->
    <randomColorsOne>
      <li>(105,95,97)</li>
      <li>(107,90,97)</li>
      <li>(115,95,110)</li>
      <li>(158,153,135)</li>
      <li>(158,155,130)</li>
      <li>(152,153,135)</li>
      <li>(158,180,155)</li>
      <li>(132,135,132)</li>
      <li>(132,135,132)</li>
      <li>(132,115,122)</li>
      <li>(130,110,122)</li>
      <li>(70,70,70)</li>
      <li>(126,104,94)</li>
      <li>(50,50,50)</li>
      <li>(200,200,200)</li>
    </randomColorsOne>
    <!-- If true, then the probability of each color is randomly chosen for each map, so each map has distinctive colors.   -->
    <seedRandomColorByMap>true</seedRandomColorByMap>
    <!-- If smaller than 1, it looks smaller in water -->
    <submergedSize>0</submergedSize>
    <submergedRadius>1</submergedRadius>
    <!-- Reproduction and death settings -->
    <minReproductionSize>0.5</minReproductionSize>
    <reproduceProp>0.001</reproduceProp>
    <deathProb>1</deathProb>
    <!-- The minimum number of crystals in clusters that are spawned during gameplay, not map creation -->
    <minSpawnClusterSize>5</minSpawnClusterSize>
    <!-- The maximum number of crystals in clusters that are spawned during gameplay, not map creation -->
    <maxSpawnClusterSize>20</maxSpawnClusterSize>
    <!-- The number of days it takes to grow at max growth speed -->
    <growDays>30</growDays>
    <!-- Chance of spawning de novo each check -->
    <spawnProb>0.01</spawnProb>
    <!-- Can spawn on items, pawns, and plants-->
    <canSpawnOnThings>false</canSpawnOnThings>
    <!-- If true, the graphics are regenerated more often -->
    <fastGraphicRefresh>true</fastGraphicRefresh>
    <!-- Tags which determine how some options behave  -->
    <tags>
      <li>rock</li>
      <li>small_rock</li>
    </tags>
  </ThingDef>

</Defs>
