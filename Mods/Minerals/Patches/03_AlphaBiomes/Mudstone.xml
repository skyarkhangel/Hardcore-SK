<?xml version="1.0" encoding="UTF-8"?>
<Patch>
  
  <Operation Class="PatchOperationFindMod">
    <mods>
      <li>Alpha Biomes</li>
    </mods>
    <match Class="PatchOperationAdd">
      <xpath>Defs</xpath>
      <value>
  
        <ThingDef Name="ZF_Mudstone" ParentName="WeatheredRockBase" Class="Minerals.ThingDef_StaticMineral">
          <defName>ZF_Mudstone</defName>
          <label>Mudstone</label>
          <description>An impassable mass of fine-grained sedimentary rock formed from hardened mud.</description>
          <graphicData>
            <shaderType>CutoutComplex</shaderType>
            <texPath>Things/Rock/WeatheredClaystone</texPath>
            <graphicClass>Graphic_Random</graphicClass>
            <drawSize>(4,4)</drawSize>
            <color>(45,36,31)</color>
          </graphicData>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsOne>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
          </randomColorsOne>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsTwo>
            <li>(100,80,75)</li>
            <li>(100,80,75)</li>
            <li>(100,80,75)</li>
          </randomColorsTwo>
          <!-- If true, then the probability of each color is randomly chosen for each map, so each map has distinctive colors.   -->
          <seedRandomColorByMap>true</seedRandomColorByMap>
          <!-- The size range -->
          <visualSizeRange>
            <min>1.9</min>
            <max>2.2</max>
          </visualSizeRange>
          <uiIconPath>Things/Rock/WeatheredClaystone/WeatheredClaystoneA</uiIconPath>
          <statBases>
            <MaxHitPoints>500</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>4</Beauty>
          </statBases>
          <building>
            <isInert>true</isInert>
            <canBuildNonEdificesUnder>false</canBuildNonEdificesUnder>
            <isNaturalRock>true</isNaturalRock>
            <isResourceRock>false</isResourceRock>
            <mineableThing>AB_ChunkMudstone</mineableThing>
            <mineableDropChance>0.2</mineableDropChance>
            <mineableYield>1</mineableYield>
            <mineableNonMinedEfficiency>0</mineableNonMinedEfficiency>
            <claimable>false</claimable>
            <deconstructible>false</deconstructible>
            <isEdifice>true</isEdifice>
          </building>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>2</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>1</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0.04</minClusterProbability>
          <maxClusterProbability>0.08</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>20</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>1</initialSizeMin>
          <initialSizeMax>1</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.3</initialSizeVariation>
          <!-- The terrains this can appear on. The default is rocky terrains-->
      		<allowedTerrains>
      			<li>ZF_Mudstone_Rough</li>
      			<li>AB_Mudstone_Rough</li>
      			<li>AB_CrackedMud</li>
      			<li>AB_RichCrackedMud</li>
      			<li>AB_FineSand</li>
      			<li>RockySoil</li>
      			<li>Gravel</li>
      			<li>Sand</li>
      			<li>Soil</li>
      			<li>SoilRich</li>
      			<li>PoorSoil</li>
      			<li>MarginalSoil</li>
            <li>SavannaSoil</li>
            <li>MarginalSoil</li>
      			<li>Ice</li>
      			<li>SaltField</li>
      		</allowedTerrains>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
      			<li>ZF_Mudstone_Rough</li>
      			<li>AB_Mudstone_Rough</li>
            <li>Mudstone</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>2</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
            <li>
              <ResourceDefName>Amber</ResourceDefName>
              <DropProbability>0.05</DropProbability>
              <CountPerDrop>10</CountPerDrop>
            </li>
            <li>
              <ResourceDefName>SmallFossil</ResourceDefName>
              <DropProbability>0.1</DropProbability>
              <CountPerDrop>1</CountPerDrop>
            </li>
          </randomlyDropResources>
          <!-- Things this mineral replaces when a map is initialized -->
          <ThingsToReplace>
            <li>AB_Mudstone</li>
          </ThingsToReplace>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>wall</li>
            <li>weathered</li>
          </tags>
        </ThingDef>
        
        
        <ThingDef Name="ZF_SolidMudstone" ParentName="SolidRockBase" Class="Minerals.ThingDef_SolidRock">
          <defName>ZF_SolidMudstone</defName>
          <label>Solid Mudstone</label>
          <description>A solid wall of Mudstone, a fine-grained sedimentary rock formed from hardened mud.</description>
          <graphicData>
            <texPath>Things/Rock/WeatheredLimestone</texPath>
            <graphicClass>Graphic_Random</graphicClass>
            <drawSize>(4,4)</drawSize>
            <color>(45,36,31)</color>
          </graphicData>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsOne>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
          </randomColorsOne>
          <uiIconPath>Things/Rock/WeatheredLimestone/WeatheredLimestoneA</uiIconPath>
          <statBases>
            <MaxHitPoints>700</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>0</Beauty>
          </statBases>
          <building>
            <isInert>true</isInert>
            <canBuildNonEdificesUnder>false</canBuildNonEdificesUnder>
            <isNaturalRock>true</isNaturalRock>
            <isResourceRock>true</isResourceRock>
            <mineableThing>AB_ChunkMudstone</mineableThing>
            <mineableDropChance>0.3</mineableDropChance>
            <mineableYield>1</mineableYield>
            <mineableNonMinedEfficiency>0.8</mineableNonMinedEfficiency>
            <claimable>false</claimable>
            <deconstructible>false</deconstructible>
            <isEdifice>true</isEdifice>
          </building>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>5</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>0</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0.01</minClusterProbability>
          <maxClusterProbability>0.01</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>3</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>1</initialSizeMin>
          <initialSizeMax>1</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.3</initialSizeVariation>
          <!-- The terrains this can appear on. The default is rocky terrains-->
      		<allowedTerrains>
      			<li>ZF_Mudstone_Rough</li>
      			<li>AB_Mudstone_Rough</li>
      			<li>AB_CrackedMud</li>
      			<li>AB_RichCrackedMud</li>
      			<li>AB_FineSand</li>
      			<li>RockySoil</li>
      			<li>Gravel</li>
      			<li>Sand</li>
      			<li>Soil</li>
      			<li>SoilRich</li>
      			<li>MarshyTerrain</li>
      			<li>Marsh</li>
      			<li>PoorSoil</li>
      			<li>MarginalSoil</li>
      			<li>Mud</li>
            <li>SavannaSoil</li>
            <li>MarginalSoil</li>
      			<li>WaterOceanShallow</li>
            <li>WaterMovingShallow</li>
      			<li>WaterShallow</li>
      			<li>Ice</li>
      			<li>SaltField</li>
      		</allowedTerrains>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
      			<li>AB_Mudstone_Rough</li>
            <li>ZF_Mudstone_Rough</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
            <li>
              <ResourceDefName>Amber</ResourceDefName>
              <DropProbability>0.05</DropProbability>
              <CountPerDrop>10</CountPerDrop>
            </li>
            <li>
              <ResourceDefName>SmallFossil</ResourceDefName>
              <DropProbability>0.1</DropProbability>
              <CountPerDrop>1</CountPerDrop>
            </li>
          </randomlyDropResources>
          <!-- Things this mineral replaces when a map is initialized -->
          <ThingsToReplace>
            <li>ZF_WeatheredMudstone</li>
            <li>ZF_HewnMudstone</li>
            <li>ZF_Mudstone</li>
            <li>AB_Mudstone</li>
          </ThingsToReplace>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>wall</li>
            <li>solid</li>
          </tags>
        </ThingDef>
      
        
        <ThingDef Name="ZF_HewnMudstone" ParentName="HewnRockBase" Class="Minerals.ThingDef_StaticMineral">
          <defName>ZF_HewnMudstone</defName>
          <label>Hewn Mudstone</label>
          <description>A hewn wall of Mudstone, a fine-grained sedimentary rock formed from hardened mud.</description>
          <graphicData>
      			<texPath>Things/Rock/HewnRockWall</texPath>
      			<graphicClass>Graphic_Random</graphicClass>
      			<linkType>CornerFiller</linkType>
      			<linkFlags>
      				<li>Wall</li>
              <li>Rock</li>
              <li>MapEdge</li>
      			</linkFlags>
      			<damageData>
      				<cornerTL>Damage/Corner</cornerTL>
      				<cornerTR>Damage/Corner</cornerTR>
      				<cornerBL>Damage/Corner</cornerBL>
      				<cornerBR>Damage/Corner</cornerBR>
      				<edgeTop>Damage/Edge</edgeTop>
      				<edgeBot>Damage/Edge</edgeBot>
      				<edgeLeft>Damage/Edge</edgeLeft>
      				<edgeRight>Damage/Edge</edgeRight>
      			</damageData>
            <color>(45,36,31)</color>
          </graphicData>
          <uiIconPath>Things/Rock/HewnRockWall/HewnRockWallA</uiIconPath>
          <statBases>
            <MaxHitPoints>900</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>0</Beauty>
          </statBases>
          <building>
            <isInert>true</isInert>
            <canBuildNonEdificesUnder>false</canBuildNonEdificesUnder>
            <isNaturalRock>true</isNaturalRock>
            <isResourceRock>true</isResourceRock>
            <mineableThing>AB_ChunkMudstone</mineableThing>
            <mineableDropChance>0.4</mineableDropChance>
            <mineableYield>1</mineableYield>
            <mineableNonMinedEfficiency>0.8</mineableNonMinedEfficiency>
            <claimable>false</claimable>
            <deconstructible>false</deconstructible>
            <isEdifice>true</isEdifice>
            <smoothedThing>ZF_SmoothedHewnMudstone</smoothedThing>
          </building>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>1</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>0</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0</minClusterProbability>
          <maxClusterProbability>0</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>10</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>1</initialSizeMin>
          <initialSizeMax>1</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.3</initialSizeVariation>
          <!-- The terrains this can appear on. The default is rocky terrains-->
          <allowedTerrains>
      		</allowedTerrains>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
            <li>Mudstone</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>3</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>false</neededNearbyTerrainSizeEffect>
          <!-- The maximum number of images that will be printed per square -->
          <maxMeshCount>1</maxMeshCount>
          <!-- The size range -->
          <visualSizeRange>
            <min>1.7</min>
            <max>1.8</max>
          </visualSizeRange>
          <visualClustering>1.0</visualClustering>
          <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
          <visualSpread>0.2</visualSpread>
          <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
          <visualSizeVariation>0.2</visualSizeVariation>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
            <li>
              <ResourceDefName>Amber</ResourceDefName>
              <DropProbability>0.05</DropProbability>
              <CountPerDrop>10</CountPerDrop>
            </li>
            <li>
              <ResourceDefName>SmallFossil</ResourceDefName>
              <DropProbability>0.1</DropProbability>
              <CountPerDrop>1</CountPerDrop>
            </li>
          </randomlyDropResources>
          <!-- Things this mineral replaces when a map is initialized -->
          <ThingsToReplace>
            <li>ZF_WeatheredMudstone</li>
            <li>ZF_Mudstone</li>
            <li>AB_Mudstone</li>
          </ThingsToReplace>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>wall</li>
            <li>hewn</li>
          </tags>
        </ThingDef>
        
        
        <ThingDef Name="ZF_SmoothedHewnMudstone" ParentName="HewnRockBase" Class="Minerals.ThingDef_StaticMineral">
          <defName>ZF_SmoothedHewnMudstone</defName>
          <label>Smoothed Mudstone wall</label>
          <description>A smoothed wall of Mudstone, a fine-grained sedimentary rock formed from hardened mud.</description>
          <graphicData>
      			<texPath>Things/Rock/SmoothedRockWall</texPath>
      			<graphicClass>Graphic_Random</graphicClass>
      			<linkType>CornerFiller</linkType>
      			<linkFlags>
      				<li>Wall</li>
              <li>Rock</li>
              <li>MapEdge</li>
      			</linkFlags>
      			<damageData>
      				<cornerTL>Damage/Corner</cornerTL>
      				<cornerTR>Damage/Corner</cornerTR>
      				<cornerBL>Damage/Corner</cornerBL>
      				<cornerBR>Damage/Corner</cornerBR>
      				<edgeTop>Damage/Edge</edgeTop>
      				<edgeBot>Damage/Edge</edgeBot>
      				<edgeLeft>Damage/Edge</edgeLeft>
      				<edgeRight>Damage/Edge</edgeRight>
      			</damageData>
            <color>(45,36,31)</color>
          </graphicData>
          <uiIconPath>Things/Rock/SmoothedRockWall/SmoothedRockWallA</uiIconPath>
          <statBases>
            <MaxHitPoints>800</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>2</Beauty>
          </statBases>
          <building>
            <isInert>true</isInert>
            <canBuildNonEdificesUnder>false</canBuildNonEdificesUnder>
            <isNaturalRock>true</isNaturalRock>
            <isResourceRock>true</isResourceRock>
            <mineableThing>AB_ChunkMudstone</mineableThing>
            <mineableDropChance>0.4</mineableDropChance>
            <mineableYield>1</mineableYield>
            <mineableNonMinedEfficiency>0.8</mineableNonMinedEfficiency>
            <claimable>false</claimable>
            <deconstructible>false</deconstructible>
            <isEdifice>true</isEdifice>
          </building>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
            <li>
              <ResourceDefName>Amber</ResourceDefName>
              <DropProbability>0.05</DropProbability>
              <CountPerDrop>10</CountPerDrop>
            </li>
            <li>
              <ResourceDefName>SmallFossil</ResourceDefName>
              <DropProbability>0.1</DropProbability>
              <CountPerDrop>1</CountPerDrop>
            </li>
          </randomlyDropResources>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>wall</li>
            <li>hewn</li>
          </tags>
        </ThingDef>
        
        
        <ThingDef Name="ZF_BoulderMudstone" ParentName="BoulderRockBase" Class="Minerals.ThingDef_StaticMineral">
          <defName>ZF_BoulderMudstone</defName>
          <label>Mudstone outcropping</label>
          <description>A Mudstone outcropping, sculpted by weather and time into flowing shapes.</description>
          <graphicData>
            <shaderType>CutoutComplex</shaderType>
            <texPath>Things/Rock/PassableClaystone</texPath>
            <graphicClass>Graphic_Random</graphicClass>
            <drawSize>(1.5,1.5)</drawSize>
            <color>(45,36,31)</color>
          </graphicData>
          <altitudeLayer>Building</altitudeLayer>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsOne>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
          </randomColorsOne>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsTwo>
            <li>(100,80,75)</li>
            <li>(100,80,75)</li>
            <li>(100,80,75)</li>
          </randomColorsTwo>
          <!-- How much to change the vertical position of the texture. Positive is up -->
          <verticalOffset>0.1</verticalOffset>
          <uiIconPath>Things/Rock/PassableClaystone/PassableClaystoneA</uiIconPath>
          <fillPercent>0.5</fillPercent>
          <statBases>
            <MaxHitPoints>250</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>2</Beauty>
          </statBases>
          <pathCost>100</pathCost>
          <building>
            <isInert>true</isInert>
            <canBuildNonEdificesUnder>false</canBuildNonEdificesUnder>
            <isNaturalRock>true</isNaturalRock>
            <isResourceRock>true</isResourceRock>
            <mineableThing>AB_ChunkMudstone</mineableThing>
            <mineableDropChance>0.3</mineableDropChance>
            <mineableYield>1</mineableYield>
            <mineableNonMinedEfficiency>0.8</mineableNonMinedEfficiency>
            <claimable>false</claimable>
            <deconstructible>false</deconstructible>
            <isEdifice>true</isEdifice>
          </building>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>2</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>1</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0.035</minClusterProbability>
          <maxClusterProbability>0.035</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>3</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>.8</initialSizeMin>
          <initialSizeMax>1.0</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.2</initialSizeVariation>
          <!-- The terrains this can appear on. The default is rocky terrains-->
      		<allowedTerrains>
      			<li>AB_Mudstone_Rough</li>
      			<li>ZF_Mudstone_Rough</li>
      			<li>AB_CrackedMud</li>
      			<li>AB_RichCrackedMud</li>
      			<li>AB_FineSand</li>
      			<li>RockySoil</li>
      			<li>Sand</li>
      			<li>PoorSoil</li>
            <li>SavannaSoil</li>
            <li>MarginalSoil</li>
      			<li>SaltField</li>
      		</allowedTerrains>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
      			<li>AB_Mudstone_Rough</li>
      			<li>ZF_Mudstone_Rough</li>
            <li>ZF_WeatheredMudstone</li>
            <li>ZF_Mudstone</li>
            <li>ZF_BoulderMudstone</li>
            <li>ZF_SolidMudstone</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>1.5</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
          <!-- Controls how extra clusters are added near assocaited ore-->
          <associatedOres>
            <li>Mudstone</li>
            <li>ZF_WeatheredMudstone</li>
            <li>ZF_SolidMudstone</li>
          </associatedOres>
          <nearAssociatedOreBonus>5</nearAssociatedOreBonus>
          <!-- Roof requirements -->
          <mustBeUnderRoof>false</mustBeUnderRoof>
          <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
          <mustBeUnroofed>true</mustBeUnroofed>
          <!-- The maximum number of images that will be printed per square -->
          <maxMeshCount>2</maxMeshCount>
          <!-- The size range -->
          <visualSizeRange>
            <min>0.7</min>
            <max>1.2</max>
          </visualSizeRange>
          <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
          <visualClustering>0.4</visualClustering>
          <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
          <visualSpread>1.2</visualSpread>
          <visualSizeVariation>0.25</visualSizeVariation>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
            <li>
              <ResourceDefName>Amber</ResourceDefName>
              <DropProbability>0.03</DropProbability>
              <CountPerDrop>10</CountPerDrop>
            </li>
            <li>
              <ResourceDefName>SmallFossil</ResourceDefName>
              <DropProbability>0.05</DropProbability>
              <CountPerDrop>1</CountPerDrop>
            </li>
          </randomlyDropResources>
          <!-- Things this mineral replaces when a map is initialized -->
          <ThingsToReplace>
            <li>AB_ChunkMudstone</li>
          </ThingsToReplace>
          <!-- Tags which determine how some options behave  -->
          <tags>
            <li>rock</li>
            <li>boulder</li>
            <li>chunk_replacer</li>
          </tags>
        </ThingDef>
        
        
        <ThingDef Name="ZF_PassableMudstone" ParentName="SmallRockBase" Class="Minerals.ThingDef_StaticMineral">
          <defName>ZF_PassableMudstone</defName>
          <label>Mudstone debris</label>
          <description>Mudstone debris</description>
          <graphicData>
            <texPath>Things/Rock/SandPile</texPath>
            <graphicClass>Graphic_Random</graphicClass>
            <drawSize>(1.5,1.5)</drawSize>
            <color>(45,36,31)</color>
            <damageData>
              <enabled>false</enabled>
            </damageData>
          </graphicData>
          <!-- If defined, randomly pick colors from this set -->
          <randomColorsOne>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
            <li>(45,36,31)</li>
          </randomColorsOne>
          <uiIconPath>Things/Rock/SandPile/SandPileA</uiIconPath>
          <fillPercent>0.3</fillPercent>
          <statBases>
            <MaxHitPoints>400</MaxHitPoints>
            <Flammability>0</Flammability>
            <Beauty>0</Beauty>
          </statBases>
          <building>
            <isInert>true</isInert>
            <canBuildNonEdificesUnder>false</canBuildNonEdificesUnder>
            <isNaturalRock>true</isNaturalRock>
            <isResourceRock>true</isResourceRock>
            <mineableThing>CrushedStone</mineableThing>
            <mineableDropChance>0.5</mineableDropChance>
            <mineableYield>5</mineableYield>
            <mineableNonMinedEfficiency>0.8</mineableNonMinedEfficiency>
            <claimable>false</claimable>
            <deconstructible>false</deconstructible>
            <isEdifice>true</isEdifice>
          </building>
          <!--How far away it can spawn from an existing location-->
          <!-- Even though it is a static crystal, the map initialization uses "reproduction" to make clusters-->
          <spawnRadius>1</spawnRadius>
          <!-- The probability that this mineral type will be spawned at all on a given map -->
          <perMapProbability>1</perMapProbability>
          <!--For a given map, the minimum/maximum probablility a cluster will spawn for every possible location -->
          <minClusterProbability>0.4</minClusterProbability>
          <maxClusterProbability>0.6</maxClusterProbability>
          <!-- How  many squares each cluster will be -->
          <minClusterSize>1</minClusterSize>
          <maxClusterSize>1</maxClusterSize>
          <!-- The range of starting sizes of individuals in clusters -->
          <initialSizeMin>.8</initialSizeMin>
          <initialSizeMax>1.0</initialSizeMax>
          <!-- How much initial sizes of individuals randomly vary -->
          <initialSizeVariation>.1</initialSizeVariation>
          <!-- The terrains this can appear on. The default is rocky terrains-->
      		<allowedTerrains>
      			<li>ZF_Mudstone_Rough</li>
      			<li>AB_Mudstone_Rough</li>
      		</allowedTerrains>
          <!-- The terrains this must be near to, but not necessarily on -->
          <neededNearbyTerrains>
            <li>ZF_WeatheredMudstone</li>
            <li>ZF_SolidMudstone</li>
      			<li>ZF_Mudstone</li>
          </neededNearbyTerrains>
          <!-- how far away it can be from needed nearby terrains-->
          <neededNearbyTerrainRadius>1.1</neededNearbyTerrainRadius>
          <!-- If true, growth rate and initial size depends on distance from needed terrains -->
          <neededNearbyTerrainSizeEffect>true</neededNearbyTerrainSizeEffect>
          <!-- Controls how extra clusters are added near assocaited ore-->
          <associatedOres>
            <li>ZF_WeatheredMudstone</li>
      			<li>ZF_Mudstone</li>
          </associatedOres>
          <nearAssociatedOreBonus>5</nearAssociatedOreBonus>
          <!-- Roof requirements -->
          <mustBeUnderRoof>false</mustBeUnderRoof>
          <mustBeUnderThickRoof>false</mustBeUnderThickRoof>
          <mustBeUnroofed>false</mustBeUnroofed>
          <!-- The maximum number of images that will be printed per square -->
          <maxMeshCount>1</maxMeshCount>
          <!-- The size range -->
          <visualSizeRange>
            <min>2.2</min>
            <max>2.5</max>
          </visualSizeRange>
          <!-- between 0 and 1. 0 = uniform distribution, 1 = normal distribution -->
          <visualClustering>1.0</visualClustering>
          <!-- 1 = everything appears within cell and can spawn at edge when visualClustering == 0 -->
          <visualSpread>0.8</visualSpread>
          <visualSizeVariation>0.1</visualSizeVariation>
          <!-- Other resources it might drop -->
          <randomlyDropResources>
            <li>
              <ResourceDefName>Amber</ResourceDefName>
              <DropProbability>0.03</DropProbability>
              <CountPerDrop>10</CountPerDrop>
            </li>
            <li>
              <ResourceDefName>SmallFossil</ResourceDefName>
              <DropProbability>0.05</DropProbability>
              <CountPerDrop>1</CountPerDrop>
            </li>
          </randomlyDropResources>
        </ThingDef>

      </value>
    </match>
  </Operation>

</Patch>
